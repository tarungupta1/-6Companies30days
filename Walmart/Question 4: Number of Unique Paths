Problem Name: Number of Unique Paths 
Link: https://practice.geeksforgeeks.org/problems/number-of-unique-paths5339/1/

Question
Given a A X B matrix with your initial position at the top-left cell, find the number of possible unique paths to reach the bottom-right cell of the matrix from the 
initial position.
Note: Possible moves can be either down or right at any point in time, i.e., we can move to matrix[i+1][j] or matrix[i][j+1] from matrix[i][j].


Time Complexity: O(min(A, B)), where A and B is the number of rows and columns in the matrix
Space Complexity: O(1)


Solution
#include<bits/stdc++.h>
using namespace std;

class Solution{
    public:
    //Function to find total number of unique paths.
    int NumberOfPath(int a, int b){
        //code here
        
        long long int ans = 1;
        for(int i=a; i<=(a+b-2); i++){
            ans *= i;
            ans /= (i - a + 1);
        }
        
        return ans;
    }
};

int main(){
    //taking total testcases
    int t;
    cin>>t;
    while(t--)    {
        //taking dimensions of the matrix
        int a,b;
        cin>>a>>b;
        Solution ob;
        //calling NumberOfPath() function
        cout << ob.NumberOfPath(a,b) << endl;
    }
}
