Problem Name: Path with Maximum Probability
Link: https://leetcode.com/problems/path-with-maximum-probability/

Question
You are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b 
with a probability of success of traversing that edge succProb[i].
Given two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability.
If there is no path from start to end, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.
 

Time Complexity: O(E * log(V)), where E is the number of edges and V is the number of nodes
Space Complexity: O(V + E), where E is the number of edges and V is the number of nodes


Solution
class Solution {
    public:

        // MAX-HEAP
        struct cmp {
            bool operator()(pair < int, double > & p1, pair < int, double > & p2) {
                return p1.second < p2.second;
            }
        };

    double maxProbability(int n, vector < vector < int >> & edges, vector < double > & succProb, int start, int end) {
    
        // initialising graph
        vector < vector < pair < int, double >>> graph(n);
        for (int i = 0; i < edges.size(); ++i) {
            graph[edges[i][0]].push_back({edges[i][1], succProb[i]});
            graph[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }

        priority_queue < pair < int, double > , vector < pair < int, double >> , cmp > pq;
        vector < double > prob(n, 0);
        pq.push({start, 1});
        prob[start] = 1;

        while (!pq.empty()) {
            int cur = pq.top().first;
            double val = pq.top().second;
            pq.pop();
            
            
            for (auto & child: graph[cur]) {
                // for a particular node, if probability is greater than the current one then we will traverse this path
                if (val * child.second > prob[child.first]) {
                    prob[child.first] = val * child.second;
                    pq.push({child.first, prob[child.first]});
                }
            }
        }

        return prob[end];
    }
};
