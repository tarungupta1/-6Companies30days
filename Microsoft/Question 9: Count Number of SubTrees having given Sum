Problem Name: Count Number of SubTrees having given Sum 
Link: https://practice.geeksforgeeks.org/problems/count-number-of-subtrees-having-given-sum/1/

Question
Given a binary tree and an integer X. Your task is to complete the function countSubtreesWithSumX() that returns the count of the number of subtress having total 
node’s data sum equal to the value X.
Example: For the tree given below:            
              5
           /     \
        -10       3
        /  \     /  \
       9    8  -4    7

Subtree with sum 7:
             -10
             /  \
            9    8

and one node 7.

Time Complexity: O(N), where N is number of nodes int the tree
Space Complexity: O(log(N)), where N is number of nodes int the tree


Solution
#include <bits/stdc++.h>
using namespace std;

// Tree Node
struct Node{
    int data;
    Node* left;
    Node* right;
};

// Utility function to create a new Tree Node
Node* newNode(int val){
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;
    
    return temp;
}

// Function to Build Tree
Node* buildTree(string str){   
    // Corner Case
    if(str.length() == 0 || str[0] == 'N')
            return NULL;
    
    // Creating vector of strings from input 
    // string after spliting by space
    vector<string> ip;
    
    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);
        
    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));
        
    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);
        
    // Starting from the second element
    int i = 1;
    while(!queue.empty() && i < ip.size()) {
            
        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();
            
        // Get the current node's value from the string
        string currVal = ip[i];
            
        // If the left child is not null
        if(currVal != "N") {
                
            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->left);
        }
            
        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];
            
        // If the right child is not null
        if(currVal != "N") {
                
            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }
    
    return root;
}

// Your are required to complete this function
int countSubtreesWithSumX(Node* root, int x);

int main(){
  int t;
  cin>>t;
  getchar();
  while (t--)  {
     string s;
     getline(cin,s);
     Node* root = buildTree(s);
     
     int x;
     cin>>x;
     getchar();
     cout << countSubtreesWithSumX(root, x)<<endl;
  }
  return 0;
}

//Function to count number of subtrees having sum equal to given sum.
//C++ solution , pre-requisite is just solve “transform to sum tree” then it is easy to go!! 
int subtree(Node* root, int X,int &count){
   int sum=0,lh,rh;
   if(!root) return 0;
   
   lh=subtree(root->left,X,count);
   rh=subtree(root->right,X,count);
   
   sum =root->data;
   if(sum+lh+rh==X) count++;
   return sum+lh+rh;
}

int countSubtreesWithSumX(Node* root, int X){
    int count=0;
    subtree(root,X,count);
    return count;
}
