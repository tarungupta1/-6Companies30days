Problem Name: Prerequisite Tasks 
Link: https://practice.geeksforgeeks.org/problems/prerequisite-tasks/1/

Question
There are a total of N tasks, labeled from 0 to N-1. Some tasks may have prerequisites, for example to do task 0 you have to first complete task 1, which is expressed 
as a pair: [0, 1]
Given the total number of tasks N and a list of prerequisite pairs P, find if it is possible to finish all tasks.


Time Complexity: O(N + P), where N and P is the number of tasks and pairs
Space Complexity: O(N + P), where N and P is the number of tasks and pairs


Solution
#include<bits/stdc++.h>
using namespace std;

class Solution {
public:
	
	// Using Topological sort(kahn's approach | BFS ) 
    bool isPossible(int N, vector<pair<int, int>>& p) {
         vector <int> adj[N]; 
         for(auto i : p) {
             adj[i.first].push_back(i.second);
         }
         
         vector<int> indegree(N, 0);
         for(int i = 0; i < N; ++i) {
             for(auto it : adj[i]) {
                 indegree[it]++;
             }
         }
         
         queue<int> q;
         for(int i = 0; i < N; ++i) {
             if(indegree[i] == 0) {
                 q.push(i);
             }
         }
         
         int count = 0;
         while(!q.empty()) {
             int node = q.front();
             count += 1;
             q.pop();
             
             for(auto i : adj[node]) {
                 indegree[i]--;
                 if(indegree[i] == 0) {
                     q.push(i);
                 }
             }
         }
        
         if(count == N) return true;
         return false;
    }
};

int main(){
	int tc;
	cin >> tc;
	while(tc--){
    	int N, P;
        vector<pair<int, int> > prerequisites;
        cin >> N;
        cin >> P;
        for (int i = 0; i < P; ++i) {
            int x, y;
            cin >> x >> y;
            prerequisites.push_back(make_pair(x, y));
        }
        Solution ob;
        if (ob.isPossible(N, prerequisites))
            cout << "Yes";
        else
            cout << "No";
        cout << endl;
	}
	return 0;
}
