Problem Name: Decode the string 
Link: https://practice.geeksforgeeks.org/problems/decode-the-string2444/1

Question
An encoded string (s) is given, the task is to decode it. The pattern in which the strings were encoded were as follows
      original string: abbbababbbababbbab 
      encoded string : 3[a3[b]1[ab]]


Time Complexity: O(S), where S is length of string
Space Complexity: O(S)


Solution
import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            String s = in.readLine();
            
            Solution ob = new Solution();
            System.out.println(ob.decodedString(s));
        }
    }
}

class Solution{
    static String decodedString(String s){
        // code here
        
        String ans = "";
        
        // stores all characters
        Stack<Character> st1 = new Stack<>();
        
        // stores all number
        Stack<Integer> st2 = new Stack<>();
        
        // traversing the whole string
        for(int i=0; i<s.length(); i++){
            
            // if it is a number then storing it in a stack
            if('0' <= s.charAt(i)  &&  s.charAt(i) <= '9'){
                
                int j = i;
                while(j < s.length()  &&  ('0' <= s.charAt(j)  &&  s.charAt(j) <= '9')){
                    j++;
                }
                
                int num = Integer.parseInt(s.substring(i, j));
                i = j-1;
                st2.push(num);
            }
            // if it is a character then storing it in a different stack
            else if('a' <= s.charAt(i)  &&  s.charAt(i) <= 'z'){
                st1.push(s.charAt(i));
            }
            // storing opening brackets in a stack
            else if(s.charAt(i) == '['){
                st1.push(s.charAt(i));
            }
            // will do copy operation now
            else{
                // popping out the characters which needs to be copied
                String temp1 = "";
                while(st1.size() > 0){
                    char ch = st1.pop();
                    if(ch == '['){
                        break;
                    }
                    else{
                        temp1 += ch;
                    }
                }
                
                // number of time we need to copy
                int num = st2.pop();
                
                // reverses the string as stack pops out in LIFO structure
                String temp2 = "";
                for(int k = temp1.length() - 1; k >= 0; k--){
                    temp2 += temp1.charAt(k);
                }
        
                ans = temp2;
                
                // copying the answer "num" times where "num" is number of times we have to copy the string
                int n = ans.length();
                for(int k=1; k<num; k++){
                    for(int j=0; j<n; j++){
                        ans += ans.charAt(j);
                    }
                }
                // storing the string in the stack
                for(int k=0; k<ans.length(); k++){
                    st1.push(ans.charAt(k));
                }
            }
        }
        
        return ans;
    }
}
