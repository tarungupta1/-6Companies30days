Problem Name: Array Pair Sum Divisibility Problem 
Link: https://practice.geeksforgeeks.org/problems/array-pair-sum-divisibility-problem3257/1

Question
Given an array of integers and a number k, write a function that returns true if given array can be divided into pairs such that sum of every pair is divisible by k.


Solution
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String s1 = br.readLine().trim();
            String[] S1 = s1.split(" ");
            int n = Integer.parseInt(S1[0]);
            int k = Integer.parseInt(S1[1]);
            String s2 = br.readLine().trim();
            String[] S2 = s2.split(" ");
            int[] nums = new int[n];
            for (int i = 0; i < n; i++) {
                nums[i] = Integer.parseInt(S2[i]);
            }
            Solution ob = new Solution();
            boolean ans = ob.canPair(nums, k);
            if (ans)
                System.out.println("True");
            else
                System.out.println("False");
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    public boolean canPair(int[] nums, int k) {
        // Code here
        
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0; i<nums.length; i++){
            int rem = nums[i] % k;
            map.put(rem, map.getOrDefault(rem, 0) + 1);
        }
        
        for(int key : map.keySet()){
            
            // second number in a pair
            int left = (k - key) % k;
            
            // when pair is same
            if(key == left){
                if(map.get(key) % 2 == 1){
                    return false;
                }
            }
            // when pair is different
            else{
                // if second number in a pair isn't present
                if(map.containsKey(left) == false){
                    return false;
                }
                
                // if both numbers aren't present with same frequency
                if(map.get(key) != map.get(left)){
                    return false;
                }
            }
        }
        
        // when every number has a number whose sum will be divisible by k
        return true;
    }
}

