Problem Name: Phone directory 
Link: https://practice.geeksforgeeks.org/problems/phone-directory4628/1/

Question
Given a list of contacts contact[] of length n where each contact is a string which exist in a phone directory and a query string s. The task is to implement a 
search query for the phone directory. Run a search query for each prefix p of the query string s (i.e. from  index 1 to |s|) that prints all the distinct contacts 
which have the same prefix as p in lexicographical increasing order. Please refer the explanation part for better understanding.
Note: If there is no match between query and contacts, print "0".


Time Complexity: O(N * |S| * max(|contact|)), where N is number of array, max(|contact|) is the maximum length of the contact and S is the length of the query string
Space Complexity: O(N * max(|contact|)), where N is number of array, max(|contact|) is the maximum length of the contact


Solution
#include <bits/stdc++.h>
using namespace std;

class Solution{
public:
    vector<vector<string>> displayContacts(int n, string a[], string s){
        // code here
        vector<vector<string>> ans;
     
      vector<string>v;
      for(int i=0;i<n;i++)
      {
          v.push_back(a[i]);
      }
      sort(v.begin(),v.end());
      for(int i=1;i<v.size();i++)
      {
          if(v[i]==v[i-1]){v.erase(v.begin()+i);
          i--;}
      }
        for(int  i=0;i<s.size();i++)
        {
            for(int j=0;j<v.size();j++)
            {
                if(v[j][i]!=s[i])
                {
                    v.erase(v.begin()+j);
                    j--;
                }
            }
            if(v.size())
            ans.push_back(v);
            else
            ans.push_back({"0"});
        }
       return ans; 
    }
};


int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        string contact[n], s;
        for(int i = 0;i < n;i++)
            cin>>contact[i];
        cin>>s;
        
        Solution ob;
        vector<vector<string>> ans = ob.displayContacts(n, contact, s);
        for(int i = 0;i < s.size();i++){
            for(auto u: ans[i])
                cout<<u<<" ";
            cout<<"\n";
        }
    }
    return 0;
} 
