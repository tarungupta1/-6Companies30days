Problem Name: Maximum of all subarrays of size k 
Link: https://practice.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1

Question
Given an array arr[] of size N and an integer K. Find the maximum for each and every contiguous subarray of size K.


Time Complexity: O(N), where N is the length of array
Space Complexity: O(K), where K is the length of subarray


Solution
#include <bits/stdc++.h>
using namespace std;

class Solution {
  public:
    int maxProfit(int k, int n, int *price){

        int arr[k + 1][n + 1];
        
        for (int i = 0; i <= k; i++){
            arr[i][0] = 0;
        }
    
        for (int j = 0; j <= n; j++){
            arr[0][j] = 0;
        }
    
        for (int i = 1; i <= k; i++) {
            for (int j = 1; j < n; j++) {
                int max_ans = INT_MIN;
    
                for (int m = 0; m < j; m++){
                    max_ans = max(max_ans, price[j] - price[m] + arr[i - 1][m]);
                }
                
                arr[i][j] = max(arr[i][j - 1], max_ans);
            }
        }
    
        return arr[k][n - 1];
    }
};

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> K;
        cin >> N;
        int A[N];
        for (int i = 0; i < N; i++) cin >> A[i];

        Solution ob;
        cout << ob.maxProfit(K, N, A) << endl;
    }
    return 0;
}
