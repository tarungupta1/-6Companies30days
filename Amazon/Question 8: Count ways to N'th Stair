Problem Name: Count ways to N'th Stair(Order does not matter) 
Link: https://practice.geeksforgeeks.org/problems/count-ways-to-nth-stairorder-does-not-matter1322/1/

Question
In the stock market, a person buys a stock and sells it on some future date. Given the stock prices of N days in an array A[ ] and a positive integer K, find out the 
maximum profit a person can make in at-most K transactions. A transaction is equivalent to (buying + selling) of a stock and new transaction can start only when the 
previous transaction has been completed.


Time Complexity: O(N), where N is the length of the stair
Space Complexity: O(N), where N is the length of the stair


Solution
import java.io.*;
import java.util.*;

class GFG {
	public static void main (String[] args) {
		
		//taking input using Scanner class
		Scanner sc = new Scanner(System.in);
		
		//taking total testcases
		int t = sc.nextInt();
		
		while(t-- > 0){
		    
		    //taking total number of stairs
		    int m = sc.nextInt();
		    
		    //creating an object of class DynamicProgramming
		    Solution obj = new Solution();
		    
		    //calling method of class countWays()
		    //of class DynamicProgramming
		    System.out.println(obj.countWays(m));
		    
		}
		
	}
}

class Solution{
    //Function to count number of ways to reach the nth stair 
    //when order does not matter.
    Long countWays(int n){
        // your code here
        long mod=(int)Math.pow(10,9)+7;
        long[] arr=new long[2];int w=n;
        arr[0]=1;arr[1]=2;n=2;
        long[][] dp=new long[n+1][w+1];
        for(int i=0;i<=n;i++) dp[i][0]=1;
        for(int i=1;i<=n;i++) {
            for(int j=1;j<=w;j++) {
                if(arr[i-1]<=j)
                    dp[i][j]=(dp[i][j-(int)arr[i-1]]+dp[i-1][j])%mod;
                else
                    dp[i][j]=(dp[i-1][j])%mod;
            }
        }
        return (Long)(long)(dp[n][w]%mod);
    }    
}
