Problem Name: Minimum sum partition 
Link: https://practice.geeksforgeeks.org/problems/minimum-sum-partition3317/1/

Question
Given an integer array arr of size N, the task is to divide it into two sets S1 and S2 such that the absolute difference between their sums is minimum and find the 
minimum difference


Time Complexity: O(N * SUM(arr)), where N is the number of elements in vector and SUM(arr) is the sum of elements present in the vector
Space Complexity: O(N * SUM(arr)), where N is the number of elements in vector and SUM(arr) is the sum of elements present in the vector


Solution
#include <bits/stdc++.h>
using namespace std;

class Solution{
    public:
    //Function to find a continuous sub-array which adds up to a given number.
    vector<int> subarraySum(int arr[], int n, long long s)    {
        // Your code here
        
        int l=0;
        long long sum=0;
        for(int i=0;i<n;i++){
            sum+=arr[i];
            while(sum>=s){
                if(sum==s){
                    return vector<int>{l+1,i+1};
                }
                sum-=arr[l];
                l++;
            }
            
        }
        return vector<int>{-1};
    }
};

int main() {
    int t;
    cin>>t;
    while(t--)    {
        int n;
        long long s;
        cin>>n>>s;
        int arr[n];
        const int mx = 1e9;
        for(int i=0;i<n;i++)        {
            cin>>arr[i];
        }
        Solution ob;
        vector<int>res;
        res = ob.subarraySum(arr, n, s);
        
        for(int i = 0;i<res.size();i++)
            cout<<res[i]<<" ";
        cout<<endl;
        
    }
	return 0;
}  
