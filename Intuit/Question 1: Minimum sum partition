Problem Name: Minimum sum partition 
Link: https://practice.geeksforgeeks.org/problems/minimum-sum-partition3317/1/

Question
Given an integer array arr of size N, the task is to divide it into two sets S1 and S2 such that the absolute difference between their sums is minimum and find the 
minimum difference


Time Complexity: O(N * SUM(arr)), where N is the number of elements in vector and SUM(arr) is the sum of elements present in the vector
Space Complexity: O(N * SUM(arr)), where N is the number of elements in vector and SUM(arr) is the sum of elements present in the vector


Solution
import java.io.*;
import java.util.*;
class GfG {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t--> 0) {
            int n = sc.nextInt();
            int A[] = new int[n];
            for (int i = 0; i < n; i++)
                A[i] = sc.nextInt();
            Solution ob = new Solution();
            System.out.println(ob.minDifference(A, n));
        }
    }
}

class Solution {

    public int minDifference(int arr[], int n) {

        int range = 0;
        for (int e: arr)
            range = range + e;

        boolean dp[][] = new boolean[n + 1][range + 1];

        subsetSum(arr, n, range, dp);

        int res[] = new int[range / 2 + 1];

        for (int j = 0; j <= range / 2; j++) {
            if (dp[n][j])
                res[j] = j;
        }

        int min = Integer.MAX_VALUE;
        for (int i = 0; i < res.length; i++) {
            min = Math.min(min, range - 2 * res[i]);
        }

        return min;
    }

    boolean subsetSum(int arr[], int n, int sum, boolean dp[][]) {

        for (int i = 0; i < n + 1; i++) {
            for (int j = 0; j < sum + 1; j++) {
                if (i == 0)
                    dp[i][j] = false;

                if (j == 0)
                    dp[i][j] = true;
            }
        }

        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < sum + 1; j++) {
                if (arr[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j - arr[i - 1]] || dp[i - 1][j];
                } else
                    dp[i][j] = dp[i - 1][j];
            }
        }

        return dp[n][sum];

    }
}
